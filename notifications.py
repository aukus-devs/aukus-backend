from db_client.games_db_client import GamesDatabaseClient
import requests
import logging
import db_client
import os
import json
from dotenv import load_dotenv

load_dotenv()
MOVES_DISCORD_WEBHOOK = os.getenv("MOVES_DISCORD_WEBHOOK")
AUKUS_TG_BOT_TOKEN = os.getenv("AUKUS_TG_BOT_TOKEN")
AUKUS_SOCKS5_PROXY = os.getenv("AUKUS_SOCKS5_PROXY")

games_db = GamesDatabaseClient()


def on_player_move(
    username,
    dice_roll,
    cell_from,
    cell_to,
    move_type,
    item_title,
    item_review,
    item_rating,
    time_duration,
):
    if time_duration is None:
        time_duration = "[–î–ê–ù–ù–´–ï –£–î–ê–õ–ï–ù–´]"
    else:
        hours = time_duration // 3600
        minutes = (time_duration % 3600) // 60
        time_duration = f"{hours}—á {minutes}–º"
    covers = games_db.search_games_multiple_igdb([item_title.lower()])
    image_url = covers[0]["box_art_url"] if len(covers) != 0 else ""
    if len(image_url) == 0:
        image_url = "https://aukus.fun/uploads/splash.jpg"
    turn_description = move_type
    if move_type == "completed":
        turn_description = "–ü—Ä–æ—à—ë–ª"
    if move_type == "drop":
        turn_description = "–î—Ä–æ–ø"
    if move_type == "movie":
        turn_description = "–§–∏–ª—å–º"
    if move_type == "reroll":
        turn_description = "–†–µ—Ä–æ–ª–ª"
    if move_type == "sheikh":
        turn_description = "–®–µ–π—Ö-–º–æ–º–µ–Ω—Ç"
    try:
        # send to TG
        message = (
            "üëâ <b>"
            + username
            + "</b>\nüé≤ –†–æ–ª–ª –∫—É–±–∏–∫–∞: <b>"
            + str(dice_roll)
            + "</b>, —Ö–æ–¥ –Ω–∞ –∫–∞—Ä—Ç–µ: <b>"
            + str(cell_from)
            + "</b>-><b>"
            + str(cell_to)
            + "</b>\n‚åõÔ∏è –ò–≥—Ä–∞–ª: <b>"
            + time_duration
            + "</b>\n‚ùî –¢–∏–ø —Ö–æ–¥–∞: <b>"
            + turn_description
            + "</b>\nüéÆ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>"
            + item_title
            + "</b>\n‚≠ê Ô∏è–û—Ü–µ–Ω–∫–∞: <b>"
            + str(item_rating)
            + "/10</b>\n‚úçÔ∏è –û—Ç–∑—ã–≤: <b>"
            + item_review
            + "</b>"
        )
        message_data = {
            "caption": message,
            "reply_markup": '{"inline_keyboard": [[{"text": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", "url": "https://aukus.fun"}]]}',
            "chat_id": "-1002372388698",
            "parse_mode": "html",
            "photo": image_url,
        }
        response = requests.post(
            "https://api.telegram.org/" + AUKUS_TG_BOT_TOKEN + "/sendPhoto",
            data=message_data,
            timeout=30,
        )
        # logging.info("TG response: " + response.text)
    except Exception as e:
        logging.error("Error send on new move to TG: " + str(e))

    try:
        # send to Discord
        proxies = {
            "http": AUKUS_SOCKS5_PROXY,
            "https": AUKUS_SOCKS5_PROXY,
        }
        url = MOVES_DISCORD_WEBHOOK
        description = (
            "üé≤ –†–æ–ª–ª –∫—É–±–∏–∫–∞: **"
            + str(dice_roll)
            + "**, —Ö–æ–¥ –Ω–∞ –∫–∞—Ä—Ç–µ: **"
            + str(cell_from)
            + "**->**"
            + str(cell_to)
            + "**\n‚åõÔ∏è –ò–≥—Ä–∞–ª: **"
            + time_duration
            + "**\n‚ùî –¢–∏–ø —Ö–æ–¥–∞: **"
            + turn_description
            + "**\n üéÆ–ù–∞–∑–≤–∞–Ω–∏–µ: **"
            + item_title
            + "**\n‚≠ê Ô∏è–û—Ü–µ–Ω–∫–∞: **"
            + str(item_rating)
            + "/10**\n‚úç Ô∏è–û—Ç–∑—ã–≤: **"
            + item_review
            + "**"
        )
        payload = json.dumps(
            {
                "content": "–ù–æ–≤—ã–π —Ö–æ–¥!",
                "embeds": [
                    {
                        "title": "üëâ **" + username + "**",
                        "url": "https://aukus.fun",
                        "description": description,
                        "image": {"url": image_url},
                    }
                ],
            }
        )
        headers = {
            "Content-Type": "application/json",
        }
        response = requests.post(
            url, data=payload, timeout=30, proxies=proxies, headers=headers
        )
        # logging.info("Discord response: " + response.text)
    except Exception as e:
        logging.error("Error send on new move to Discord: " + str(e))


def on_pointauc_result(username, title):
    try:
        # send to TG
        message = (
            "üëâ <b>" + username + "</b>\nüé≤ –í—ã–ø–∞–ª–æ –Ω–∞ –∞—É–∫–µ: <b>" + str(title) + "</b>"
        )
        message_data = {
            "caption": message,
            "reply_markup": '{"inline_keyboard": [[{"text": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", "url": "https://aukus.fun"}]]}',
            "chat_id": "-1002372388698",
            "parse_mode": "html",
            "photo": "https://aukus.fun/uploads/splash.jpg",
        }
        response = requests.post(
            "https://api.telegram.org/" + AUKUS_TG_BOT_TOKEN + "/sendPhoto",
            data=message_data,
            timeout=30,
        )
        # logging.info("TG response: " + response.text)
    except Exception as e:
        logging.error("Error send pointauc result to TG: " + str(e))

    try:
        # send to Discord
        proxies = {
            "http": AUKUS_SOCKS5_PROXY,
            "https": AUKUS_SOCKS5_PROXY,
        }
        url = MOVES_DISCORD_WEBHOOK
        description = "üé≤ –í—ã–ø–∞–ª–æ –Ω–∞ –∞—É–∫–µ: **" + str(title) + "**"
        payload = json.dumps(
            {
                "content": "–í—ã–ø–∞–ª –Ω–æ–≤—ã–π –ª–æ—Ç –Ω–∞ –∞—É–∫–µ!",
                "embeds": [
                    {
                        "title": "üëâ **" + username + "**",
                        "url": "https://aukus.fun",
                        "description": description,
                        "image": {"url": "https://aukus.fun/uploads/splash.jpg"},
                    }
                ],
            }
        )
        headers = {
            "Content-Type": "application/json",
        }
        response = requests.post(
            url, data=payload, timeout=30, proxies=proxies, headers=headers
        )
        # logging.info("Discord response: " + response.text)
    except Exception as e:
        logging.error("Error send pointauc result to Discord: " + str(e))


def on_pointauc_timer_started(username):
    try:
        # send to TG
        message = "üëâ <b>" + username + "</b>\n‚ö°Ô∏è <b>–ù–∞—á–∞–ª –∞—É–∫—Ü–∏–æ–Ω!</b>"
        message_data = {
            "caption": message,
            "reply_markup": '{"inline_keyboard": [[{"text": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", "url": "https://aukus.fun"}]]}',
            "chat_id": "-1002372388698",
            "parse_mode": "html",
            "photo": "https://aukus.fun/uploads/splash.jpg",
        }
        response = requests.post(
            "https://api.telegram.org/" + AUKUS_TG_BOT_TOKEN + "/sendPhoto",
            data=message_data,
            timeout=30,
        )
        # logging.info("TG response: " + response.text)
    except Exception as e:
        logging.error("Error send pointauc started to TG: " + str(e))

    try:
        # send to Discord
        proxies = {
            "http": AUKUS_SOCKS5_PROXY,
            "https": AUKUS_SOCKS5_PROXY,
        }
        url = MOVES_DISCORD_WEBHOOK
        description = "‚ö°Ô∏è **–ù–∞—á–∞–ª –∞—É–∫—Ü–∏–æ–Ω!**"
        payload = json.dumps(
            {
                "content": "–ù–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω!",
                "embeds": [
                    {
                        "title": "üëâ **" + username + "**",
                        "url": "https://aukus.fun",
                        "description": description,
                        "image": {"url": "https://aukus.fun/uploads/splash.jpg"},
                    }
                ],
            }
        )
        headers = {
            "Content-Type": "application/json",
        }
        response = requests.post(
            url, data=payload, timeout=30, proxies=proxies, headers=headers
        )
        # logging.info("Discord response: " + response.text)
    except Exception as e:
        logging.error("Error send pointauc started to Discord: " + str(e))
